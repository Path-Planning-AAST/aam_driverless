// Generated by gencpp from file orb_slam2_ros/ORBState.msg
// DO NOT EDIT!


#ifndef ORB_SLAM2_ROS_MESSAGE_ORBSTATE_H
#define ORB_SLAM2_ROS_MESSAGE_ORBSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace orb_slam2_ros
{
template <class ContainerAllocator>
struct ORBState_
{
  typedef ORBState_<ContainerAllocator> Type;

  ORBState_()
    : header()
    , state(0)
    , num_closes(0)  {
    }
  ORBState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , num_closes(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _state_type;
  _state_type state;

   typedef uint16_t _num_closes_type;
  _num_closes_type num_closes;



  enum {
    UNKNOWN = 0u,
    SYSTEM_NOT_READY = 1u,
    NO_IMAGES_YET = 2u,
    NOT_INITIALIZED = 3u,
    MAPPING = 4u,
    LOCALIZING = 5u,
    LOST = 6u,
  };


  typedef boost::shared_ptr< ::orb_slam2_ros::ORBState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::orb_slam2_ros::ORBState_<ContainerAllocator> const> ConstPtr;

}; // struct ORBState_

typedef ::orb_slam2_ros::ORBState_<std::allocator<void> > ORBState;

typedef boost::shared_ptr< ::orb_slam2_ros::ORBState > ORBStatePtr;
typedef boost::shared_ptr< ::orb_slam2_ros::ORBState const> ORBStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::orb_slam2_ros::ORBState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::orb_slam2_ros::ORBState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace orb_slam2_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'orb_slam2_ros': ['/home/fayoumi/aam_carto_ws/src/ORB_SLAM2/orb_slam2_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orb_slam2_ros::ORBState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orb_slam2_ros::ORBState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orb_slam2_ros::ORBState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a1b35f9b2e5df4fa8c6909051734938";
  }

  static const char* value(const ::orb_slam2_ros::ORBState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a1b35f9b2e5df4fULL;
  static const uint64_t static_value2 = 0xa8c6909051734938ULL;
};

template<class ContainerAllocator>
struct DataType< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "orb_slam2_ros/ORBState";
  }

  static const char* value(const ::orb_slam2_ros::ORBState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint16 state # State from Tracking.h\n\
uint16 num_closes  # number of loop closure occured\n\
\n\
# constants for enum-like access\n\
uint16 UNKNOWN=0\n\
uint16 SYSTEM_NOT_READY=1\n\
uint16 NO_IMAGES_YET=2\n\
uint16 NOT_INITIALIZED=3\n\
uint16 MAPPING=4\n\
uint16 LOCALIZING=5\n\
uint16 LOST=6\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::orb_slam2_ros::ORBState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.num_closes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ORBState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::orb_slam2_ros::ORBState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::orb_slam2_ros::ORBState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state);
    s << indent << "num_closes: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_closes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_ROS_MESSAGE_ORBSTATE_H
